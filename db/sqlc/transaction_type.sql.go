// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction_type.sql

package db

import (
	"context"
	"database/sql"
)

const createTransactionType = `-- name: CreateTransactionType :one
INSERT INTO transaction_types (
    type_code,
    description
) VALUES (
    $1, $2
) RETURNING type_code, description, is_active, created_at, updated_at
`

type CreateTransactionTypeParams struct {
	TypeCode    string `json:"type_code"`
	Description string `json:"description"`
}

func (q *Queries) CreateTransactionType(ctx context.Context, arg CreateTransactionTypeParams) (TransactionType, error) {
	row := q.db.QueryRow(ctx, createTransactionType, arg.TypeCode, arg.Description)
	var i TransactionType
	err := row.Scan(
		&i.TypeCode,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransactionType = `-- name: DeleteTransactionType :exec
UPDATE transaction_types
SET is_active = false
WHERE type_code = $1
`

func (q *Queries) DeleteTransactionType(ctx context.Context, typeCode string) error {
	_, err := q.db.Exec(ctx, deleteTransactionType, typeCode)
	return err
}

const getTransactionType = `-- name: GetTransactionType :one
SELECT type_code, description, is_active, created_at, updated_at FROM transaction_types
WHERE type_code = $1
`

func (q *Queries) GetTransactionType(ctx context.Context, typeCode string) (TransactionType, error) {
	row := q.db.QueryRow(ctx, getTransactionType, typeCode)
	var i TransactionType
	err := row.Scan(
		&i.TypeCode,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteTransactionType = `-- name: HardDeleteTransactionType :exec
DELETE FROM transaction_types
WHERE type_code = $1
`

func (q *Queries) HardDeleteTransactionType(ctx context.Context, typeCode string) error {
	_, err := q.db.Exec(ctx, hardDeleteTransactionType, typeCode)
	return err
}

const listTransactionTypes = `-- name: ListTransactionTypes :many
SELECT type_code, description, is_active, created_at, updated_at FROM transaction_types
WHERE is_active = true
ORDER BY type_code
`

func (q *Queries) ListTransactionTypes(ctx context.Context) ([]TransactionType, error) {
	rows, err := q.db.Query(ctx, listTransactionTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionType{}
	for rows.Next() {
		var i TransactionType
		if err := rows.Scan(
			&i.TypeCode,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionType = `-- name: UpdateTransactionType :one
UPDATE transaction_types 
SET 
    description = COALESCE($1, description),
    is_active = COALESCE($2, is_active)
WHERE type_code = $3
RETURNING type_code, description, is_active, created_at, updated_at
`

type UpdateTransactionTypeParams struct {
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
	TypeCode    string         `json:"type_code"`
}

func (q *Queries) UpdateTransactionType(ctx context.Context, arg UpdateTransactionTypeParams) (TransactionType, error) {
	row := q.db.QueryRow(ctx, updateTransactionType, arg.Description, arg.IsActive, arg.TypeCode)
	var i TransactionType
	err := row.Scan(
		&i.TypeCode,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
