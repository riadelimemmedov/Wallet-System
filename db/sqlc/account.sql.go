// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    user_id,
    account_number,
    account_type,
    currency_code,
    interest_rate,
    overdraft_limit
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING account_id, user_id, account_number, account_type, balance, currency_code, interest_rate, overdraft_limit, is_active, created_at, updated_at
`

type CreateAccountParams struct {
	UserID         int32          `json:"user_id"`
	AccountNumber  string         `json:"account_number"`
	AccountType    string         `json:"account_type"`
	CurrencyCode   string         `json:"currency_code"`
	InterestRate   pgtype.Numeric `json:"interest_rate"`
	OverdraftLimit pgtype.Numeric `json:"overdraft_limit"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.UserID,
		arg.AccountNumber,
		arg.AccountType,
		arg.CurrencyCode,
		arg.InterestRate,
		arg.OverdraftLimit,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.CurrencyCode,
		&i.InterestRate,
		&i.OverdraftLimit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts
SET is_active = false
WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID int32) error {
	_, err := q.db.Exec(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, user_id, account_number, account_type, balance, currency_code, interest_rate, overdraft_limit, is_active, created_at, updated_at FROM accounts
WHERE account_id = $1
`

func (q *Queries) GetAccount(ctx context.Context, accountID int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.CurrencyCode,
		&i.InterestRate,
		&i.OverdraftLimit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT account_id, user_id, account_number, account_type, balance, currency_code, interest_rate, overdraft_limit, is_active, created_at, updated_at FROM accounts
WHERE account_id = $1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, accountID int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.CurrencyCode,
		&i.InterestRate,
		&i.OverdraftLimit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteAccount = `-- name: HardDeleteAccount :exec
DELETE FROM accounts
WHERE account_id = $1
`

func (q *Queries) HardDeleteAccount(ctx context.Context, accountID int32) error {
	_, err := q.db.Exec(ctx, hardDeleteAccount, accountID)
	return err
}

const listAccountsByUser = `-- name: ListAccountsByUser :many
SELECT account_id, user_id, account_number, account_type, balance, currency_code, interest_rate, overdraft_limit, is_active, created_at, updated_at FROM accounts
WHERE user_id = $1
ORDER BY account_id
`

func (q *Queries) ListAccountsByUser(ctx context.Context, userID int32) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccountsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.UserID,
			&i.AccountNumber,
			&i.AccountType,
			&i.Balance,
			&i.CurrencyCode,
			&i.InterestRate,
			&i.OverdraftLimit,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts 
SET balance = balance + $1
WHERE account_id = $2
RETURNING account_id, user_id, account_number, account_type, balance, currency_code, interest_rate, overdraft_limit, is_active, created_at, updated_at
`

type UpdateAccountBalanceParams struct {
	Amount    pgtype.Numeric `json:"amount"`
	AccountID int32          `json:"account_id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountBalance, arg.Amount, arg.AccountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.CurrencyCode,
		&i.InterestRate,
		&i.OverdraftLimit,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
