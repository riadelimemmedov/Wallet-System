// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password_hash,
    email,
    first_name,
    last_name,
    phone_number
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING user_id, username, password_hash, email, first_name, last_name, phone_number, is_active, last_login, created_at, updated_at
`

type CreateUserParams struct {
	Username     string         `json:"username"`
	PasswordHash string         `json:"password_hash"`
	Email        sql.NullString `json:"email"`
	FirstName    sql.NullString `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET is_active = false
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password_hash, email, first_name, last_name, phone_number, is_active, last_login, created_at, updated_at FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, hardDeleteUser, userID)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, username, password_hash, email, first_name, last_name, phone_number, is_active, last_login, created_at, updated_at FROM users
ORDER BY user_id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.IsActive,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    username = COALESCE($1, username),
    email = COALESCE($2, email),
    first_name = COALESCE($3, first_name),
    last_name = COALESCE($4, last_name),
    phone_number = COALESCE($5, phone_number),
    is_active = COALESCE($6, is_active)
WHERE user_id = $7
RETURNING user_id, username, password_hash, email, first_name, last_name, phone_number, is_active, last_login, created_at, updated_at
`

type UpdateUserParams struct {
	Username    sql.NullString `json:"username"`
	Email       sql.NullString `json:"email"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	IsActive    sql.NullBool   `json:"is_active"`
	UserID      int32          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.IsActive,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
