// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction_status.sql

package db

import (
	"context"
	"database/sql"
)

const createTransactionStatus = `-- name: CreateTransactionStatus :one
INSERT INTO transaction_status (
    status_code,
    description
) VALUES (
    $1, $2
) RETURNING status_code, description, is_active, created_at, updated_at
`

type CreateTransactionStatusParams struct {
	StatusCode  string `json:"status_code"`
	Description string `json:"description"`
}

func (q *Queries) CreateTransactionStatus(ctx context.Context, arg CreateTransactionStatusParams) (TransactionStatus, error) {
	row := q.db.QueryRow(ctx, createTransactionStatus, arg.StatusCode, arg.Description)
	var i TransactionStatus
	err := row.Scan(
		&i.StatusCode,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransactionStatus = `-- name: DeleteTransactionStatus :exec
UPDATE transaction_status
SET is_active = false
WHERE status_code = $1
`

func (q *Queries) DeleteTransactionStatus(ctx context.Context, statusCode string) error {
	_, err := q.db.Exec(ctx, deleteTransactionStatus, statusCode)
	return err
}

const getActiveTransactionStatus = `-- name: GetActiveTransactionStatus :many
SELECT status_code, description, is_active, created_at, updated_at FROM transaction_status
WHERE is_active = true
AND status_code = ANY($1::varchar[])
`

func (q *Queries) GetActiveTransactionStatus(ctx context.Context, dollar_1 []string) ([]TransactionStatus, error) {
	rows, err := q.db.Query(ctx, getActiveTransactionStatus, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionStatus{}
	for rows.Next() {
		var i TransactionStatus
		if err := rows.Scan(
			&i.StatusCode,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionStatus = `-- name: GetTransactionStatus :one
SELECT status_code, description, is_active, created_at, updated_at FROM transaction_status
WHERE status_code = $1
`

func (q *Queries) GetTransactionStatus(ctx context.Context, statusCode string) (TransactionStatus, error) {
	row := q.db.QueryRow(ctx, getTransactionStatus, statusCode)
	var i TransactionStatus
	err := row.Scan(
		&i.StatusCode,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const hardDeleteTransactionStatus = `-- name: HardDeleteTransactionStatus :exec
DELETE FROM transaction_status
WHERE status_code = $1
`

func (q *Queries) HardDeleteTransactionStatus(ctx context.Context, statusCode string) error {
	_, err := q.db.Exec(ctx, hardDeleteTransactionStatus, statusCode)
	return err
}

const listTransactionStatus = `-- name: ListTransactionStatus :many
SELECT status_code, description, is_active, created_at, updated_at FROM transaction_status
WHERE is_active = true
ORDER BY status_code
`

func (q *Queries) ListTransactionStatus(ctx context.Context) ([]TransactionStatus, error) {
	rows, err := q.db.Query(ctx, listTransactionStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionStatus{}
	for rows.Next() {
		var i TransactionStatus
		if err := rows.Scan(
			&i.StatusCode,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const modifyTransactionStatus = `-- name: ModifyTransactionStatus :one
UPDATE transaction_status 
SET 
    description = COALESCE($1, description),
    is_active = COALESCE($2, is_active)
WHERE status_code = $3
RETURNING status_code, description, is_active, created_at, updated_at
`

type ModifyTransactionStatusParams struct {
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
	StatusCode  string         `json:"status_code"`
}

func (q *Queries) ModifyTransactionStatus(ctx context.Context, arg ModifyTransactionStatusParams) (TransactionStatus, error) {
	row := q.db.QueryRow(ctx, modifyTransactionStatus, arg.Description, arg.IsActive, arg.StatusCode)
	var i TransactionStatus
	err := row.Scan(
		&i.StatusCode,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
