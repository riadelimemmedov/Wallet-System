// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entrie.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    account_id,
    amount
) VALUES (
    $1, $2
) RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID sql.NullInt32  `json:"account_id"`
	Amount    pgtype.Numeric `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountBalance = `-- name: GetAccountBalance :one
SELECT COALESCE(SUM(amount), 0) as balance
FROM entries
WHERE account_id = $1
`

func (q *Queries) GetAccountBalance(ctx context.Context, accountID sql.NullInt32) (interface{}, error) {
	row := q.db.QueryRow(ctx, getAccountBalance, accountID)
	var balance interface{}
	err := row.Scan(&balance)
	return balance, err
}

const getAccountStatement = `-- name: GetAccountStatement :many
SELECT created_at, amount 
FROM entries
WHERE account_id = $1
AND created_at BETWEEN $2 AND $3
ORDER BY created_at DESC
`

type GetAccountStatementParams struct {
	AccountID   sql.NullInt32 `json:"account_id"`
	CreatedAt   time.Time     `json:"created_at"`
	CreatedAt_2 time.Time     `json:"created_at_2"`
}

type GetAccountStatementRow struct {
	CreatedAt time.Time      `json:"created_at"`
	Amount    pgtype.Numeric `json:"amount"`
}

func (q *Queries) GetAccountStatement(ctx context.Context, arg GetAccountStatementParams) ([]GetAccountStatementRow, error) {
	rows, err := q.db.Query(ctx, getAccountStatement, arg.AccountID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountStatementRow{}
	for rows.Next() {
		var i GetAccountStatementRow
		if err := rows.Scan(&i.CreatedAt, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = $1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const hardDeleteEntries = `-- name: HardDeleteEntries :exec
DELETE FROM entries
WHERE account_id = $1
`

func (q *Queries) HardDeleteEntries(ctx context.Context, accountID sql.NullInt32) error {
	_, err := q.db.Exec(ctx, hardDeleteEntries, accountID)
	return err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, amount, created_at FROM entries
WHERE account_id = $1
ORDER BY id DESC
LIMIT $2 OFFSET $3
`

type ListEntriesParams struct {
	AccountID sql.NullInt32 `json:"account_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, listEntries, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
