services:
  postgres_test:
    container_name: simple_bank_test_db
    image: postgres:12-alpine
    env_file:
      - .env.test
    environment:
      - POSTGRES_USER=${TEST_DB_USER}
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - POSTGRES_DB=${TEST_DB_NAME}
    ports:
      - "${TEST_DB_HOST_PORT}:${TEST_DB_CONTAINER_PORT}"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DB_USER} -p ${TEST_DB_CONTAINER_PORT}"]
      interval: 5s
      timeout: 5s
      retries: ${TEST_DB_MAX_RETRIES}
    command: -p ${TEST_DB_CONTAINER_PORT}  # Set PostgreSQL port

  api_test:
    container_name: simple_bank_test_api
    build:
      context: ../..
      dockerfile: Docker/test/Dockerfile
    env_file:
      - .env.test
    ports:
      - "${TEST_API_HOST_PORT}:${TEST_API_CONTAINER_PORT}"
    environment:
      - DB_SOURCE=${TEST_DB_SOURCE}
      - DB_MAX_CONNS=${TEST_DB_MAX_CONNS}
      - DB_MIN_CONNS=${TEST_DB_MIN_CONNS}
      - DB_CONN_LIFETIME=${TEST_DB_CONN_LIFETIME}
      - DB_CONN_IDLE_TIME=${TEST_DB_CONN_IDLE_TIME}
      - DB_MAX_RETRIES=${TEST_DB_MAX_RETRIES}
      - GIN_MODE=test
      - PORT=${TEST_API_CONTAINER_PORT}
    depends_on:
      postgres_test:
        condition: service_healthy
    command: go test -v -cover ./...

volumes:
  postgres-test-data:
    name: simple_bank_test_data